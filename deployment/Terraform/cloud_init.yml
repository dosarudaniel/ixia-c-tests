#cloud-config
package_upgrade: true
packages:
  - awscli
  - docker.io
  - docker-compose
  - dpdk-kmods-dkms
  - emacs
  - iperf
  - iperf3
  - jq
  - net-tools
  - python3-pip
  - python3.10-venv
groups:
  - docker
users:
  - default
  - name: ubuntu
    groups: docker
runcmd:
  - sudo -H -u ${PackerUserName} bash -c 'git clone ${GitRepoUrl} $HOME/${GitRepoName}'
  - echo ${KengContainerRegistryToken} | docker login ${KengContainerRegistry} -u ${KengContainerRegistryUser} --password-stdin
  - docker pull ${KengControllerImage}
  - docker pull ${KengTrafficEngineImage}
  - docker logout ${KengContainerRegistry}
  - docker images
  - sudo -H -u ${PackerUserName} bash -c 'echo "alias python=python3" >> $HOME/.bashrc'
  - sudo -H -u ${PackerUserName} bash -c 'echo "alias pip=pip3" >> $HOME/.bashrc'
  - python3 -m pip install --upgrade pip
  - python3 --version
  - pip3 --version
  - sudo -H -u ${PackerUserName} bash -c 'python3 -m venv $HOME/venv'
  - sudo -H -u ${PackerUserName} bash -c 'source $HOME/venv/bin/activate; pip install -r $HOME/${GitRepoName}/py/requirements.txt; deactivate'
  - printf "\nexport PUBLIC_HOSTNAME=\$(curl -s ${AwsMetadataServerUrl}/public-hostname)\n" >> /home/${PackerUserName}/.profile
  - printf "export PUBLIC_IPV4=\$(curl -s ${AwsMetadataServerUrl}/public-ipv4)\n" >> /home/${PackerUserName}/.profile
  - printf "echo \"env(PUBLIC_HOSTNAME) = \$PUBLIC_HOSTNAME\"\n" >> /home/${PackerUserName}/.profile
  - printf "echo \"env(PUBLIC_IPV4) = \$PUBLIC_IPV4\"\n" >> /home/${PackerUserName}/.profile
  - systemctl status snap.amazon-ssm-agent.amazon-ssm-agent.service
  - AgentEth1LogicalName=$(lshw -C network -json | jq .[1].logicalname --raw-output)
  - AgentEth1BusInfo=$(lshw -C network -json | jq .[1].businfo --raw-output)
  - AgentEth2LogicalName=$(lshw -C network -json | jq .[2].logicalname --raw-output)
  - AgentEth2BusInfo=$(lshw -C network -json | jq .[2].businfo --raw-output)
  - AgentEth3LogicalName=$(lshw -C network -json | jq .[3].logicalname --raw-output)
  - AgentEth3BusInfo=$(lshw -C network -json | jq .[3].businfo --raw-output)
  - AgentInstanceType=$(curl -s ${AwsMetadataServerUrl}/instance-type)
  - AgentRegion=$(curl -s ${AwsMetadataServerUrl}/placement/region)
  - aws configure set region $AgentRegion
  - Agent1Eth1MacAddress=$(aws ec2 describe-network-interfaces --filters Name=addresses.private-ip-address,Values=${Agent1Eth1PrivateIpAddresses[0]} | jq .NetworkInterfaces[0].MacAddress --raw-output)
  - Agent2Eth1MacAddress=$(aws ec2 describe-network-interfaces --filters Name=addresses.private-ip-address,Values=${Agent2Eth1PrivateIpAddresses[0]} | jq .NetworkInterfaces[0].MacAddress --raw-output)
  - sed -i "s/00:AA:00:00:01:00/$Agent1Eth1MacAddress/g" /home/${PackerUserName}/${GitRepoName}/configs/*.json
  - sed -i "s/00:AA:00:00:02:00/$Agent2Eth1MacAddress/g" /home/${PackerUserName}/${GitRepoName}/configs/*.json
  - Agent1Eth2MacAddress=$(aws ec2 describe-network-interfaces --filters Name=addresses.private-ip-address,Values=${Agent1Eth2PrivateIpAddresses[0]} | jq .NetworkInterfaces[0].MacAddress --raw-output)
  - Agent2Eth2MacAddress=$(aws ec2 describe-network-interfaces --filters Name=addresses.private-ip-address,Values=${Agent2Eth2PrivateIpAddresses[0]} | jq .NetworkInterfaces[0].MacAddress --raw-output)
  - sed -i "s/00:AA:00:00:03:00/$Agent1Eth2MacAddress/g" /home/${PackerUserName}/${GitRepoName}/configs/*.json
  - sed -i "s/00:AA:00:00:04:00/$Agent2Eth2MacAddress/g" /home/${PackerUserName}/${GitRepoName}/configs/*.json
  - Agent1Eth3MacAddress=$(aws ec2 describe-network-interfaces --filters Name=addresses.private-ip-address,Values=${Agent1Eth3PrivateIpAddresses[0]} | jq .NetworkInterfaces[0].MacAddress --raw-output)
  - Agent2Eth3MacAddress=$(aws ec2 describe-network-interfaces --filters Name=addresses.private-ip-address,Values=${Agent2Eth3PrivateIpAddresses[0]} | jq .NetworkInterfaces[0].MacAddress --raw-output)
  - sed -i "s/00:AA:00:00:05:00/$Agent1Eth3MacAddress/g" /home/${PackerUserName}/${GitRepoName}/configs/*.json
  - sed -i "s/00:AA:00:00:06:00/$Agent2Eth3MacAddress/g" /home/${PackerUserName}/${GitRepoName}/configs/*.json
  - AgentInstanceTypeSpeed=$(aws ec2 describe-instance-types --filters "Name=instance-type,Values=$AgentInstanceType" --query "InstanceTypes[].[InstanceType, NetworkInfo.NetworkPerformance]" | jq .[0][1] | tr -dc '0-9')
  - sed -i "s/speed_10_gbps/speed_AgentInstanceTypeSpeed_gbps/g" /home/${PackerUserName}/${GitRepoName}/configs/*.json
  - sed -i "s/AgentInstanceTypeSpeed/$AgentInstanceTypeSpeed/g" /home/${PackerUserName}/${GitRepoName}/configs/*.json
  - sed -i "s/speed_10_gbps/speed_AgentInstanceTypeSpeed_gbps/g" /home/${PackerUserName}/${GitRepoName}/*.json
  - sed -i "s/AgentInstanceTypeSpeed/$AgentInstanceTypeSpeed/g" /home/${PackerUserName}/${GitRepoName}/*.json
  - sed -i "s/pci@eth1/$AgentEth1BusInfo/g" /home/${PackerUserName}/${GitRepoName}/deployment/docker-compose.yaml
  - sed -i "s/pci@eth2/$AgentEth2BusInfo/g" /home/${PackerUserName}/${GitRepoName}/deployment/docker-compose.yaml
  - sed -i "s/pci@eth3/$AgentEth3BusInfo/g" /home/${PackerUserName}/${GitRepoName}/deployment/docker-compose.yaml
  - modprobe uio
  - modprobe igb_uio
  - sudo -H -u ${PackerUserName} bash -c 'git clone https://github.com/DPDK/dpdk.git $HOME/dpdk'
  - /home/${PackerUserName}/dpdk/usertools/dpdk-devbind.py -b igb_uio $AgentEth1LogicalName -s --force
  - /home/${PackerUserName}/dpdk/usertools/dpdk-devbind.py -b igb_uio $AgentEth2LogicalName -s --force
  - /home/${PackerUserName}/dpdk/usertools/dpdk-devbind.py -b igb_uio $AgentEth3LogicalName -s --force
  - chmod +x /home/${PackerUserName}/${GitRepoName}/*.sh
  - chmod +x /home/${PackerUserName}/${GitRepoName}/deployment/setup.sh
  - /home/${PackerUserName}/${GitRepoName}/deployment/setup.sh
  - sudo -H -u ${PackerUserName} bash -c 'docker-compose -f $HOME/${GitRepoName}/deployment/docker-compose.yaml up -d'
  - sudo -H -u ${PackerUserName} bash -c 'docker-compose -f $HOME/${GitRepoName}/deployment/docker-compose.yaml ps'